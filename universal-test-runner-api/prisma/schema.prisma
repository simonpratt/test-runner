// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  PENDING
  RUNNING
  FINISHED
}

enum CommandStatus {
  PENDING
  RUNNING
  FINISHED
  ABORTED
}

model Job {
  id                  String            @id @default(uuid())
  selector            String
  status              JobStatus
  Command             Command[]
  dockerImageConfig   DockerImageConfig @relation(fields: [dockerImageConfigId], references: [id])
  dockerImageConfigId String
  Environment         Environment?      @relation(fields: [environmentId], references: [id])
  environmentId       String?
}

model Command {
  id     String        @id @default(uuid())
  spec   String
  status CommandStatus
  Job    Job           @relation(fields: [jobId], references: [id])
  jobId  String
}

model Environment {
  id                  String                @id
  name                String
  Job                 Job[]
  EnvironmentVariable EnvironmentVariable[]
}

model EnvironmentVariable {
  id            String      @id @default(uuid())
  name          String
  value         String
  Environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String
}

model DockerImageConfig {
  id                        String                      @id @default(uuid())
  name                      String
  dockerImage               String
  startCommand              String
  Job                       Job[]
  DockerImageConfigVariable DockerImageConfigVariable[]
}

model DockerImageConfigVariable {
  id                  String            @id @default(uuid())
  name                String
  value               String
  DockerImageConfig   DockerImageConfig @relation(fields: [dockerImageConfigId], references: [id])
  dockerImageConfigId String
}
